

Terminals which are not used:

   WHILE
   FOR
   SUBPREFIX
   ADDRIGHT
   SUBRIGHT
   MULRIGHT
   DIVRIGHT
   ADDPREFIX



Grammar
rule 1    PreProcessorDirectives -> HASH INCLUDE LIBRARY Global
rule 2    Main -> INT MAIN OB CB CompoundStmt Function '~'
rule 3    Identifier -> ID
rule 4    CompoundStmt -> SO Stmt SC
rule 5    Global -> FunctionDefinition Global
rule 6    Global -> ClosureFunctionDefinition Global
rule 7    Global -> GlobeDeclaration Global
rule 8    Global -> Main
rule 9    GlobeDeclaration -> Type VarList SEMICOLON
rule 10   GlobeDeclaration -> Type GlobeAssignExpr
rule 11   GlobeAssignExpr -> Identifier EQUAL Extra COMMA GlobeAssignExpr
rule 12   GlobeAssignExpr -> Identifier EQUAL Extra SEMICOLON
rule 13   FunctionDefinition -> FunctionName OB CB SEMICOLON
rule 14   FunctionDefinition -> FunctionName OB ParamsType CB SEMICOLON
rule 15   FunctionName -> Type Identifier
rule 16   ParamsType -> ParamsType COMMA Type
rule 17   ParamsType -> Type
rule 18   ClosureFunctionDefinition -> CLOSURE COLON FunctionDefinition
rule 19   Stmt -> Extra SEMICOLON Stmt
rule 20   Stmt -> Declaration Stmt
rule 21   Stmt -> AssignExpr Stmt
rule 22   Stmt -> SelectionStmt Stmt
rule 23   Stmt -> JumpStmt Stmt
rule 24   Stmt -> FunctionCall Stmt
rule 25   Stmt -> CompoundStmt Stmt
rule 26   Stmt -> error SEMICOLON
rule 27   Stmt ->		/* empty */
rule 28   Function -> FunctionName OB CB CompoundStmt Function
rule 29   Function -> FunctionName OB FunctionParams CB SO Stmt ClosureFunction Stmt SC Function
rule 30   Function -> FunctionName OB CB SO Stmt ClosureFunction Stmt SC Function
rule 31   Function -> FunctionName OB FunctionParams CB CompoundStmt Function
rule 32   Function ->		/* empty */
rule 33   ClosureFunction -> CLOSURE COLON FunctionName OB CB SO Stmt SC
rule 34   ClosureFunction -> CLOSURE COLON FunctionName OB FunctionParams CB SO Stmt SC
rule 35   FunctionParams -> FunctionParams COMMA Type Identifier
rule 36   FunctionParams -> Type Identifier
rule 37   Declaration -> Type VarList SEMICOLON
rule 38   Declaration -> Type AssignExpr
rule 39   FunctionCall -> Identifier EQUAL Identifier OB VarList CB SEMICOLON
rule 40   FunctionCall -> Identifier OB VarList CB SEMICOLON
rule 41   AssignExpr -> Identifier EQUAL Extra COMMA AssignExpr
rule 42   AssignExpr -> Identifier EQUAL Extra SEMICOLON
rule 43   SelectionStmt -> IF OB cond CB CompoundStmt
rule 44   SelectionStmt -> IF OB cond CB CompoundStmt ELSE CompoundStmt
rule 45   JumpStmt -> CONT SEMICOLON
rule 46   JumpStmt -> BRK SEMICOLON
rule 47   JumpStmt -> RTRN Extra SEMICOLON
rule 48   cond -> Expr
rule 49   cond -> Expr logOp Expr
rule 50   Expr -> relExp
rule 51   Expr -> logExp
rule 52   relExp -> Extra relOp E
rule 53   logExp -> Extra logOp E
rule 54   Extra -> E
rule 55   logOp -> BINARYOR
rule 56   logOp -> BINARYAND
rule 57   relOp -> LT
rule 58   relOp -> GT
rule 59   relOp -> LTE
rule 60   relOp -> GTE
rule 61   relOp -> NE
rule 62   relOp -> EQ
rule 63   Type -> INT
rule 64   Type -> VOID
rule 65   Type -> CHAR
rule 66   VarList -> VarList COMMA Identifier
rule 67   VarList -> Identifier
rule 68   E -> E ADD T
rule 69   E -> E SUB T
rule 70   E -> T
rule 71   T -> T MUL F
rule 72   T -> T DIV F
rule 73   T -> F
rule 74   F -> ID
rule 75   F -> NUM
rule 76   F -> OB E CB

Terminals, with rules where they appear

$ (-1)
'~' (126) 2
error (256) 26
INT (258) 2 63
MAIN (259) 2
OB (260) 2 13 14 28 29 30 31 33 34 39 40 43 44 76
CB (261) 2 13 14 28 29 30 31 33 34 39 40 43 44 76
SO (262) 4 29 30 33 34
SC (263) 4 29 30 33 34
CLOSURE (264) 18 33 34
COLON (265) 18 33 34
HASH (266) 1
INCLUDE (267) 1
LIBRARY (268) 1
IF (269) 43 44
ELSE (270) 44
WHILE (271)
FOR (272)
CONT (273) 45
BRK (274) 46
RTRN (275) 47
SEMICOLON (276) 9 12 13 14 19 26 37 39 40 42 45 46 47
BINARYOR (277) 55
BINARYAND (278) 56
LT (279) 57
GT (280) 58
LTE (281) 59
GTE (282) 60
NE (283) 61
EQ (284) 62
VOID (285) 64
CHAR (286) 65
COMMA (287) 11 16 35 41 66
EQUAL (288) 11 12 39 41 42
SUBPREFIX (289)
ADD (290) 68
SUB (291) 69
MUL (292) 71
DIV (293) 72
ADDRIGHT (294)
SUBRIGHT (295)
MULRIGHT (296)
DIVRIGHT (297)
ADDPREFIX (298)
ID (299) 3 74
NUM (300) 75

Nonterminals, with rules where they appear

PreProcessorDirectives (47)
    on left: 1
Main (48)
    on left: 2, on right: 8
Identifier (49)
    on left: 3, on right: 11 12 15 35 36 39 40 41 42 66 67
CompoundStmt (50)
    on left: 4, on right: 2 25 28 31 43 44
Global (51)
    on left: 5 6 7 8, on right: 1 5 6 7
GlobeDeclaration (52)
    on left: 9 10, on right: 7
GlobeAssignExpr (53)
    on left: 11 12, on right: 10 11
FunctionDefinition (54)
    on left: 13 14, on right: 5 18
FunctionName (55)
    on left: 15, on right: 13 14 28 29 30 31 33 34
ParamsType (56)
    on left: 16 17, on right: 14 16
ClosureFunctionDefinition (57)
    on left: 18, on right: 6
Stmt (58)
    on left: 19 20 21 22 23 24 25 26 27, on right: 4 19 20 21 22 23
    24 25 29 30 33 34
Function (59)
    on left: 28 29 30 31 32, on right: 2 28 29 30 31
ClosureFunction (60)
    on left: 33 34, on right: 29 30
FunctionParams (61)
    on left: 35 36, on right: 29 31 34 35
Declaration (62)
    on left: 37 38, on right: 20
FunctionCall (63)
    on left: 39 40, on right: 24
AssignExpr (64)
    on left: 41 42, on right: 21 38 41
SelectionStmt (65)
    on left: 43 44, on right: 22
JumpStmt (66)
    on left: 45 46 47, on right: 23
cond (67)
    on left: 48 49, on right: 43 44
Expr (68)
    on left: 50 51, on right: 48 49
relExp (69)
    on left: 52, on right: 50
logExp (70)
    on left: 53, on right: 51
Extra (71)
    on left: 54, on right: 11 12 19 41 42 47 52 53
logOp (72)
    on left: 55 56, on right: 49 53
relOp (73)
    on left: 57 58 59 60 61 62, on right: 52
Type (74)
    on left: 63 64 65, on right: 9 10 15 16 17 35 36 37 38
VarList (75)
    on left: 66 67, on right: 9 37 39 40 66
E (76)
    on left: 68 69 70, on right: 52 53 54 68 69 76
T (77)
    on left: 71 72 73, on right: 68 69 70 71 72
F (78)
    on left: 74 75 76, on right: 71 72 73


state 0

    HASH	shift, and go to state 1

    PreProcessorDirectives	go to state 182



state 1

    PreProcessorDirectives  ->  HASH . INCLUDE LIBRARY Global   (rule 1)

    INCLUDE	shift, and go to state 2



state 2

    PreProcessorDirectives  ->  HASH INCLUDE . LIBRARY Global   (rule 1)

    LIBRARY	shift, and go to state 3



state 3

    PreProcessorDirectives  ->  HASH INCLUDE LIBRARY . Global   (rule 1)

    INT 	shift, and go to state 4
    CLOSURE	shift, and go to state 5
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    Main	go to state 8
    Global	go to state 9
    GlobeDeclaration	go to state 10
    FunctionDefinition	go to state 11
    FunctionName	go to state 12
    ClosureFunctionDefinition	go to state 13
    Type	go to state 14



state 4

    Main  ->  INT . MAIN OB CB CompoundStmt Function '~'   (rule 2)
    Type  ->  INT .   (rule 63)

    MAIN	shift, and go to state 15

    $default	reduce using rule 63 (Type)



state 5

    ClosureFunctionDefinition  ->  CLOSURE . COLON FunctionDefinition   (rule 18)

    COLON	shift, and go to state 16



state 6

    Type  ->  VOID .   (rule 64)

    $default	reduce using rule 64 (Type)



state 7

    Type  ->  CHAR .   (rule 65)

    $default	reduce using rule 65 (Type)



state 8

    Global  ->  Main .   (rule 8)

    $default	reduce using rule 8 (Global)



state 9

    PreProcessorDirectives  ->  HASH INCLUDE LIBRARY Global .   (rule 1)

    $default	reduce using rule 1 (PreProcessorDirectives)



state 10

    Global  ->  GlobeDeclaration . Global   (rule 7)

    INT 	shift, and go to state 4
    CLOSURE	shift, and go to state 5
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    Main	go to state 8
    Global	go to state 17
    GlobeDeclaration	go to state 10
    FunctionDefinition	go to state 11
    FunctionName	go to state 12
    ClosureFunctionDefinition	go to state 13
    Type	go to state 14



state 11

    Global  ->  FunctionDefinition . Global   (rule 5)

    INT 	shift, and go to state 4
    CLOSURE	shift, and go to state 5
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    Main	go to state 8
    Global	go to state 18
    GlobeDeclaration	go to state 10
    FunctionDefinition	go to state 11
    FunctionName	go to state 12
    ClosureFunctionDefinition	go to state 13
    Type	go to state 14



state 12

    FunctionDefinition  ->  FunctionName . OB CB SEMICOLON   (rule 13)
    FunctionDefinition  ->  FunctionName . OB ParamsType CB SEMICOLON   (rule 14)

    OB  	shift, and go to state 19



state 13

    Global  ->  ClosureFunctionDefinition . Global   (rule 6)

    INT 	shift, and go to state 4
    CLOSURE	shift, and go to state 5
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    Main	go to state 8
    Global	go to state 20
    GlobeDeclaration	go to state 10
    FunctionDefinition	go to state 11
    FunctionName	go to state 12
    ClosureFunctionDefinition	go to state 13
    Type	go to state 14



state 14

    GlobeDeclaration  ->  Type . VarList SEMICOLON   (rule 9)
    GlobeDeclaration  ->  Type . GlobeAssignExpr   (rule 10)
    FunctionName  ->  Type . Identifier   (rule 15)

    ID  	shift, and go to state 21

    Identifier	go to state 22
    GlobeAssignExpr	go to state 23
    VarList	go to state 24



state 15

    Main  ->  INT MAIN . OB CB CompoundStmt Function '~'   (rule 2)

    OB  	shift, and go to state 25



state 16

    ClosureFunctionDefinition  ->  CLOSURE COLON . FunctionDefinition   (rule 18)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    FunctionDefinition	go to state 27
    FunctionName	go to state 12
    Type	go to state 28



state 17

    Global  ->  GlobeDeclaration Global .   (rule 7)

    $default	reduce using rule 7 (Global)



state 18

    Global  ->  FunctionDefinition Global .   (rule 5)

    $default	reduce using rule 5 (Global)



state 19

    FunctionDefinition  ->  FunctionName OB . CB SEMICOLON   (rule 13)
    FunctionDefinition  ->  FunctionName OB . ParamsType CB SEMICOLON   (rule 14)

    INT 	shift, and go to state 26
    CB  	shift, and go to state 29
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    ParamsType	go to state 30
    Type	go to state 31



state 20

    Global  ->  ClosureFunctionDefinition Global .   (rule 6)

    $default	reduce using rule 6 (Global)



state 21

    Identifier  ->  ID .   (rule 3)

    $default	reduce using rule 3 (Identifier)



state 22

    GlobeAssignExpr  ->  Identifier . EQUAL Extra COMMA GlobeAssignExpr   (rule 11)
    GlobeAssignExpr  ->  Identifier . EQUAL Extra SEMICOLON   (rule 12)
    FunctionName  ->  Type Identifier .   (rule 15)
    VarList  ->  Identifier .   (rule 67)

    EQUAL	shift, and go to state 32

    OB  	reduce using rule 15 (FunctionName)
    MUL 	reduce using rule 15 (FunctionName)
    $default	reduce using rule 67 (VarList)



state 23

    GlobeDeclaration  ->  Type GlobeAssignExpr .   (rule 10)

    $default	reduce using rule 10 (GlobeDeclaration)



state 24

    GlobeDeclaration  ->  Type VarList . SEMICOLON   (rule 9)
    VarList  ->  VarList . COMMA Identifier   (rule 66)

    SEMICOLON	shift, and go to state 33
    COMMA	shift, and go to state 34



state 25

    Main  ->  INT MAIN OB . CB CompoundStmt Function '~'   (rule 2)

    CB  	shift, and go to state 35



state 26

    Type  ->  INT .   (rule 63)

    $default	reduce using rule 63 (Type)



state 27

    ClosureFunctionDefinition  ->  CLOSURE COLON FunctionDefinition .   (rule 18)

    $default	reduce using rule 18 (ClosureFunctionDefinition)



state 28

    FunctionName  ->  Type . Identifier   (rule 15)

    ID  	shift, and go to state 21

    Identifier	go to state 36



state 29

    FunctionDefinition  ->  FunctionName OB CB . SEMICOLON   (rule 13)

    SEMICOLON	shift, and go to state 37



state 30

    FunctionDefinition  ->  FunctionName OB ParamsType . CB SEMICOLON   (rule 14)
    ParamsType  ->  ParamsType . COMMA Type   (rule 16)

    CB  	shift, and go to state 38
    COMMA	shift, and go to state 39



state 31

    ParamsType  ->  Type .   (rule 17)

    $default	reduce using rule 17 (ParamsType)



state 32

    GlobeAssignExpr  ->  Identifier EQUAL . Extra COMMA GlobeAssignExpr   (rule 11)
    GlobeAssignExpr  ->  Identifier EQUAL . Extra SEMICOLON   (rule 12)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    Extra	go to state 43
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 33

    GlobeDeclaration  ->  Type VarList SEMICOLON .   (rule 9)

    $default	reduce using rule 9 (GlobeDeclaration)



state 34

    VarList  ->  VarList COMMA . Identifier   (rule 66)

    ID  	shift, and go to state 21

    Identifier	go to state 47



state 35

    Main  ->  INT MAIN OB CB . CompoundStmt Function '~'   (rule 2)

    SO  	shift, and go to state 48

    CompoundStmt	go to state 49



state 36

    FunctionName  ->  Type Identifier .   (rule 15)

    $default	reduce using rule 15 (FunctionName)



state 37

    FunctionDefinition  ->  FunctionName OB CB SEMICOLON .   (rule 13)

    $default	reduce using rule 13 (FunctionDefinition)



state 38

    FunctionDefinition  ->  FunctionName OB ParamsType CB . SEMICOLON   (rule 14)

    SEMICOLON	shift, and go to state 50



state 39

    ParamsType  ->  ParamsType COMMA . Type   (rule 16)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    Type	go to state 51



state 40

    F  ->  OB . E CB   (rule 76)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    E   	go to state 52
    T   	go to state 45
    F   	go to state 46



state 41

    F  ->  ID .   (rule 74)

    $default	reduce using rule 74 (F)



state 42

    F  ->  NUM .   (rule 75)

    $default	reduce using rule 75 (F)



state 43

    GlobeAssignExpr  ->  Identifier EQUAL Extra . COMMA GlobeAssignExpr   (rule 11)
    GlobeAssignExpr  ->  Identifier EQUAL Extra . SEMICOLON   (rule 12)

    SEMICOLON	shift, and go to state 53
    COMMA	shift, and go to state 54



state 44

    Extra  ->  E .   (rule 54)
    E  ->  E . ADD T   (rule 68)
    E  ->  E . SUB T   (rule 69)

    ADD 	shift, and go to state 55
    SUB 	shift, and go to state 56

    $default	reduce using rule 54 (Extra)



state 45

    E  ->  T .   (rule 70)
    T  ->  T . MUL F   (rule 71)
    T  ->  T . DIV F   (rule 72)

    MUL 	shift, and go to state 57
    DIV 	shift, and go to state 58

    $default	reduce using rule 70 (E)



state 46

    T  ->  F .   (rule 73)

    $default	reduce using rule 73 (T)



state 47

    VarList  ->  VarList COMMA Identifier .   (rule 66)

    $default	reduce using rule 66 (VarList)



state 48

    CompoundStmt  ->  SO . Stmt SC   (rule 4)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 67
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 49

    Main  ->  INT MAIN OB CB CompoundStmt . Function '~'   (rule 2)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    $default	reduce using rule 32 (Function)

    FunctionName	go to state 75
    Function	go to state 76
    Type	go to state 28



state 50

    FunctionDefinition  ->  FunctionName OB ParamsType CB SEMICOLON .   (rule 14)

    $default	reduce using rule 14 (FunctionDefinition)



state 51

    ParamsType  ->  ParamsType COMMA Type .   (rule 16)

    $default	reduce using rule 16 (ParamsType)



state 52

    E  ->  E . ADD T   (rule 68)
    E  ->  E . SUB T   (rule 69)
    F  ->  OB E . CB   (rule 76)

    CB  	shift, and go to state 77
    ADD 	shift, and go to state 55
    SUB 	shift, and go to state 56



state 53

    GlobeAssignExpr  ->  Identifier EQUAL Extra SEMICOLON .   (rule 12)

    $default	reduce using rule 12 (GlobeAssignExpr)



state 54

    GlobeAssignExpr  ->  Identifier EQUAL Extra COMMA . GlobeAssignExpr   (rule 11)

    ID  	shift, and go to state 21

    Identifier	go to state 78
    GlobeAssignExpr	go to state 79



state 55

    E  ->  E ADD . T   (rule 68)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    T   	go to state 80
    F   	go to state 46



state 56

    E  ->  E SUB . T   (rule 69)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    T   	go to state 81
    F   	go to state 46



state 57

    T  ->  T MUL . F   (rule 71)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    F   	go to state 82



state 58

    T  ->  T DIV . F   (rule 72)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    F   	go to state 83



state 59

    Stmt  ->  error . SEMICOLON   (rule 26)

    SEMICOLON	shift, and go to state 84



state 60

    SelectionStmt  ->  IF . OB cond CB CompoundStmt   (rule 43)
    SelectionStmt  ->  IF . OB cond CB CompoundStmt ELSE CompoundStmt   (rule 44)

    OB  	shift, and go to state 85



state 61

    JumpStmt  ->  CONT . SEMICOLON   (rule 45)

    SEMICOLON	shift, and go to state 86



state 62

    JumpStmt  ->  BRK . SEMICOLON   (rule 46)

    SEMICOLON	shift, and go to state 87



state 63

    JumpStmt  ->  RTRN . Extra SEMICOLON   (rule 47)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    Extra	go to state 88
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 64

    Identifier  ->  ID .   (rule 3)
    F  ->  ID .   (rule 74)

    OB  	reduce using rule 3 (Identifier)
    MUL 	reduce using rule 3 (Identifier)
    $default	reduce using rule 74 (F)



state 65

    FunctionCall  ->  Identifier . EQUAL Identifier OB VarList CB SEMICOLON   (rule 39)
    FunctionCall  ->  Identifier . OB VarList CB SEMICOLON   (rule 40)
    AssignExpr  ->  Identifier . EQUAL Extra COMMA AssignExpr   (rule 41)
    AssignExpr  ->  Identifier . EQUAL Extra SEMICOLON   (rule 42)

    OB  	shift, and go to state 89
    EQUAL	shift, and go to state 90



state 66

    Stmt  ->  CompoundStmt . Stmt   (rule 25)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 91
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 67

    CompoundStmt  ->  SO Stmt . SC   (rule 4)

    SC  	shift, and go to state 92



state 68

    Stmt  ->  Declaration . Stmt   (rule 20)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 93
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 69

    Stmt  ->  FunctionCall . Stmt   (rule 24)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 94
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 70

    Stmt  ->  AssignExpr . Stmt   (rule 21)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 95
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 71

    Stmt  ->  SelectionStmt . Stmt   (rule 22)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 96
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 72

    Stmt  ->  JumpStmt . Stmt   (rule 23)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 97
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 73

    Stmt  ->  Extra . SEMICOLON Stmt   (rule 19)

    SEMICOLON	shift, and go to state 98



state 74

    Declaration  ->  Type . VarList SEMICOLON   (rule 37)
    Declaration  ->  Type . AssignExpr   (rule 38)

    ID  	shift, and go to state 21

    Identifier	go to state 99
    AssignExpr	go to state 100
    VarList	go to state 101



state 75

    Function  ->  FunctionName . OB CB CompoundStmt Function   (rule 28)
    Function  ->  FunctionName . OB FunctionParams CB SO Stmt ClosureFunction Stmt SC Function   (rule 29)
    Function  ->  FunctionName . OB CB SO Stmt ClosureFunction Stmt SC Function   (rule 30)
    Function  ->  FunctionName . OB FunctionParams CB CompoundStmt Function   (rule 31)

    OB  	shift, and go to state 102



state 76

    Main  ->  INT MAIN OB CB CompoundStmt Function . '~'   (rule 2)

    '~' 	shift, and go to state 103



state 77

    F  ->  OB E CB .   (rule 76)

    $default	reduce using rule 76 (F)



state 78

    GlobeAssignExpr  ->  Identifier . EQUAL Extra COMMA GlobeAssignExpr   (rule 11)
    GlobeAssignExpr  ->  Identifier . EQUAL Extra SEMICOLON   (rule 12)

    EQUAL	shift, and go to state 32



state 79

    GlobeAssignExpr  ->  Identifier EQUAL Extra COMMA GlobeAssignExpr .   (rule 11)

    $default	reduce using rule 11 (GlobeAssignExpr)



state 80

    E  ->  E ADD T .   (rule 68)
    T  ->  T . MUL F   (rule 71)
    T  ->  T . DIV F   (rule 72)

    MUL 	shift, and go to state 57
    DIV 	shift, and go to state 58

    $default	reduce using rule 68 (E)



state 81

    E  ->  E SUB T .   (rule 69)
    T  ->  T . MUL F   (rule 71)
    T  ->  T . DIV F   (rule 72)

    MUL 	shift, and go to state 57
    DIV 	shift, and go to state 58

    $default	reduce using rule 69 (E)



state 82

    T  ->  T MUL F .   (rule 71)

    $default	reduce using rule 71 (T)



state 83

    T  ->  T DIV F .   (rule 72)

    $default	reduce using rule 72 (T)



state 84

    Stmt  ->  error SEMICOLON .   (rule 26)

    $default	reduce using rule 26 (Stmt)



state 85

    SelectionStmt  ->  IF OB . cond CB CompoundStmt   (rule 43)
    SelectionStmt  ->  IF OB . cond CB CompoundStmt ELSE CompoundStmt   (rule 44)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    cond	go to state 104
    Expr	go to state 105
    relExp	go to state 106
    logExp	go to state 107
    Extra	go to state 108
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 86

    JumpStmt  ->  CONT SEMICOLON .   (rule 45)

    $default	reduce using rule 45 (JumpStmt)



state 87

    JumpStmt  ->  BRK SEMICOLON .   (rule 46)

    $default	reduce using rule 46 (JumpStmt)



state 88

    JumpStmt  ->  RTRN Extra . SEMICOLON   (rule 47)

    SEMICOLON	shift, and go to state 109



state 89

    FunctionCall  ->  Identifier OB . VarList CB SEMICOLON   (rule 40)

    ID  	shift, and go to state 21

    Identifier	go to state 110
    VarList	go to state 111



state 90

    FunctionCall  ->  Identifier EQUAL . Identifier OB VarList CB SEMICOLON   (rule 39)
    AssignExpr  ->  Identifier EQUAL . Extra COMMA AssignExpr   (rule 41)
    AssignExpr  ->  Identifier EQUAL . Extra SEMICOLON   (rule 42)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    Identifier	go to state 112
    Extra	go to state 113
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 91

    Stmt  ->  CompoundStmt Stmt .   (rule 25)

    $default	reduce using rule 25 (Stmt)



state 92

    CompoundStmt  ->  SO Stmt SC .   (rule 4)

    $default	reduce using rule 4 (CompoundStmt)



state 93

    Stmt  ->  Declaration Stmt .   (rule 20)

    $default	reduce using rule 20 (Stmt)



state 94

    Stmt  ->  FunctionCall Stmt .   (rule 24)

    $default	reduce using rule 24 (Stmt)



state 95

    Stmt  ->  AssignExpr Stmt .   (rule 21)

    $default	reduce using rule 21 (Stmt)



state 96

    Stmt  ->  SelectionStmt Stmt .   (rule 22)

    $default	reduce using rule 22 (Stmt)



state 97

    Stmt  ->  JumpStmt Stmt .   (rule 23)

    $default	reduce using rule 23 (Stmt)



state 98

    Stmt  ->  Extra SEMICOLON . Stmt   (rule 19)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 114
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 99

    AssignExpr  ->  Identifier . EQUAL Extra COMMA AssignExpr   (rule 41)
    AssignExpr  ->  Identifier . EQUAL Extra SEMICOLON   (rule 42)
    VarList  ->  Identifier .   (rule 67)

    EQUAL	shift, and go to state 115

    $default	reduce using rule 67 (VarList)



state 100

    Declaration  ->  Type AssignExpr .   (rule 38)

    $default	reduce using rule 38 (Declaration)



state 101

    Declaration  ->  Type VarList . SEMICOLON   (rule 37)
    VarList  ->  VarList . COMMA Identifier   (rule 66)

    SEMICOLON	shift, and go to state 116
    COMMA	shift, and go to state 34



state 102

    Function  ->  FunctionName OB . CB CompoundStmt Function   (rule 28)
    Function  ->  FunctionName OB . FunctionParams CB SO Stmt ClosureFunction Stmt SC Function   (rule 29)
    Function  ->  FunctionName OB . CB SO Stmt ClosureFunction Stmt SC Function   (rule 30)
    Function  ->  FunctionName OB . FunctionParams CB CompoundStmt Function   (rule 31)

    INT 	shift, and go to state 26
    CB  	shift, and go to state 117
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    FunctionParams	go to state 118
    Type	go to state 119



state 103

    Main  ->  INT MAIN OB CB CompoundStmt Function '~' .   (rule 2)

    $default	reduce using rule 2 (Main)



state 104

    SelectionStmt  ->  IF OB cond . CB CompoundStmt   (rule 43)
    SelectionStmt  ->  IF OB cond . CB CompoundStmt ELSE CompoundStmt   (rule 44)

    CB  	shift, and go to state 120



state 105

    cond  ->  Expr .   (rule 48)
    cond  ->  Expr . logOp Expr   (rule 49)

    BINARYOR	shift, and go to state 121
    BINARYAND	shift, and go to state 122

    $default	reduce using rule 48 (cond)

    logOp	go to state 123



state 106

    Expr  ->  relExp .   (rule 50)

    $default	reduce using rule 50 (Expr)



state 107

    Expr  ->  logExp .   (rule 51)

    $default	reduce using rule 51 (Expr)



state 108

    relExp  ->  Extra . relOp E   (rule 52)
    logExp  ->  Extra . logOp E   (rule 53)

    BINARYOR	shift, and go to state 121
    BINARYAND	shift, and go to state 122
    LT  	shift, and go to state 124
    GT  	shift, and go to state 125
    LTE 	shift, and go to state 126
    GTE 	shift, and go to state 127
    NE  	shift, and go to state 128
    EQ  	shift, and go to state 129

    logOp	go to state 130
    relOp	go to state 131



state 109

    JumpStmt  ->  RTRN Extra SEMICOLON .   (rule 47)

    $default	reduce using rule 47 (JumpStmt)



state 110

    VarList  ->  Identifier .   (rule 67)

    $default	reduce using rule 67 (VarList)



state 111

    FunctionCall  ->  Identifier OB VarList . CB SEMICOLON   (rule 40)
    VarList  ->  VarList . COMMA Identifier   (rule 66)

    CB  	shift, and go to state 132
    COMMA	shift, and go to state 34



state 112

    FunctionCall  ->  Identifier EQUAL Identifier . OB VarList CB SEMICOLON   (rule 39)

    OB  	shift, and go to state 133



state 113

    AssignExpr  ->  Identifier EQUAL Extra . COMMA AssignExpr   (rule 41)
    AssignExpr  ->  Identifier EQUAL Extra . SEMICOLON   (rule 42)

    SEMICOLON	shift, and go to state 134
    COMMA	shift, and go to state 135



state 114

    Stmt  ->  Extra SEMICOLON Stmt .   (rule 19)

    $default	reduce using rule 19 (Stmt)



state 115

    AssignExpr  ->  Identifier EQUAL . Extra COMMA AssignExpr   (rule 41)
    AssignExpr  ->  Identifier EQUAL . Extra SEMICOLON   (rule 42)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    Extra	go to state 113
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 116

    Declaration  ->  Type VarList SEMICOLON .   (rule 37)

    $default	reduce using rule 37 (Declaration)



state 117

    Function  ->  FunctionName OB CB . CompoundStmt Function   (rule 28)
    Function  ->  FunctionName OB CB . SO Stmt ClosureFunction Stmt SC Function   (rule 30)

    SO  	shift, and go to state 136

    CompoundStmt	go to state 137



state 118

    Function  ->  FunctionName OB FunctionParams . CB SO Stmt ClosureFunction Stmt SC Function   (rule 29)
    Function  ->  FunctionName OB FunctionParams . CB CompoundStmt Function   (rule 31)
    FunctionParams  ->  FunctionParams . COMMA Type Identifier   (rule 35)

    CB  	shift, and go to state 138
    COMMA	shift, and go to state 139



state 119

    FunctionParams  ->  Type . Identifier   (rule 36)

    ID  	shift, and go to state 21

    Identifier	go to state 140



state 120

    SelectionStmt  ->  IF OB cond CB . CompoundStmt   (rule 43)
    SelectionStmt  ->  IF OB cond CB . CompoundStmt ELSE CompoundStmt   (rule 44)

    SO  	shift, and go to state 48

    CompoundStmt	go to state 141



state 121

    logOp  ->  BINARYOR .   (rule 55)

    $default	reduce using rule 55 (logOp)



state 122

    logOp  ->  BINARYAND .   (rule 56)

    $default	reduce using rule 56 (logOp)



state 123

    cond  ->  Expr logOp . Expr   (rule 49)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    Expr	go to state 142
    relExp	go to state 106
    logExp	go to state 107
    Extra	go to state 108
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 124

    relOp  ->  LT .   (rule 57)

    $default	reduce using rule 57 (relOp)



state 125

    relOp  ->  GT .   (rule 58)

    $default	reduce using rule 58 (relOp)



state 126

    relOp  ->  LTE .   (rule 59)

    $default	reduce using rule 59 (relOp)



state 127

    relOp  ->  GTE .   (rule 60)

    $default	reduce using rule 60 (relOp)



state 128

    relOp  ->  NE .   (rule 61)

    $default	reduce using rule 61 (relOp)



state 129

    relOp  ->  EQ .   (rule 62)

    $default	reduce using rule 62 (relOp)



state 130

    logExp  ->  Extra logOp . E   (rule 53)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    E   	go to state 143
    T   	go to state 45
    F   	go to state 46



state 131

    relExp  ->  Extra relOp . E   (rule 52)

    OB  	shift, and go to state 40
    ID  	shift, and go to state 41
    NUM 	shift, and go to state 42

    E   	go to state 144
    T   	go to state 45
    F   	go to state 46



state 132

    FunctionCall  ->  Identifier OB VarList CB . SEMICOLON   (rule 40)

    SEMICOLON	shift, and go to state 145



state 133

    FunctionCall  ->  Identifier EQUAL Identifier OB . VarList CB SEMICOLON   (rule 39)

    ID  	shift, and go to state 21

    Identifier	go to state 110
    VarList	go to state 146



state 134

    AssignExpr  ->  Identifier EQUAL Extra SEMICOLON .   (rule 42)

    $default	reduce using rule 42 (AssignExpr)



state 135

    AssignExpr  ->  Identifier EQUAL Extra COMMA . AssignExpr   (rule 41)

    ID  	shift, and go to state 21

    Identifier	go to state 147
    AssignExpr	go to state 148



state 136

    CompoundStmt  ->  SO . Stmt SC   (rule 4)
    Function  ->  FunctionName OB CB SO . Stmt ClosureFunction Stmt SC Function   (rule 30)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 149
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 137

    Function  ->  FunctionName OB CB CompoundStmt . Function   (rule 28)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    $default	reduce using rule 32 (Function)

    FunctionName	go to state 75
    Function	go to state 150
    Type	go to state 28



state 138

    Function  ->  FunctionName OB FunctionParams CB . SO Stmt ClosureFunction Stmt SC Function   (rule 29)
    Function  ->  FunctionName OB FunctionParams CB . CompoundStmt Function   (rule 31)

    SO  	shift, and go to state 151

    CompoundStmt	go to state 152



state 139

    FunctionParams  ->  FunctionParams COMMA . Type Identifier   (rule 35)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    Type	go to state 153



state 140

    FunctionParams  ->  Type Identifier .   (rule 36)

    $default	reduce using rule 36 (FunctionParams)



state 141

    SelectionStmt  ->  IF OB cond CB CompoundStmt .   (rule 43)
    SelectionStmt  ->  IF OB cond CB CompoundStmt . ELSE CompoundStmt   (rule 44)

    ELSE	shift, and go to state 154

    $default	reduce using rule 43 (SelectionStmt)



state 142

    cond  ->  Expr logOp Expr .   (rule 49)

    $default	reduce using rule 49 (cond)



state 143

    logExp  ->  Extra logOp E .   (rule 53)
    E  ->  E . ADD T   (rule 68)
    E  ->  E . SUB T   (rule 69)

    ADD 	shift, and go to state 55
    SUB 	shift, and go to state 56

    $default	reduce using rule 53 (logExp)



state 144

    relExp  ->  Extra relOp E .   (rule 52)
    E  ->  E . ADD T   (rule 68)
    E  ->  E . SUB T   (rule 69)

    ADD 	shift, and go to state 55
    SUB 	shift, and go to state 56

    $default	reduce using rule 52 (relExp)



state 145

    FunctionCall  ->  Identifier OB VarList CB SEMICOLON .   (rule 40)

    $default	reduce using rule 40 (FunctionCall)



state 146

    FunctionCall  ->  Identifier EQUAL Identifier OB VarList . CB SEMICOLON   (rule 39)
    VarList  ->  VarList . COMMA Identifier   (rule 66)

    CB  	shift, and go to state 155
    COMMA	shift, and go to state 34



state 147

    AssignExpr  ->  Identifier . EQUAL Extra COMMA AssignExpr   (rule 41)
    AssignExpr  ->  Identifier . EQUAL Extra SEMICOLON   (rule 42)

    EQUAL	shift, and go to state 115



state 148

    AssignExpr  ->  Identifier EQUAL Extra COMMA AssignExpr .   (rule 41)

    $default	reduce using rule 41 (AssignExpr)



state 149

    CompoundStmt  ->  SO Stmt . SC   (rule 4)
    Function  ->  FunctionName OB CB SO Stmt . ClosureFunction Stmt SC Function   (rule 30)

    SC  	shift, and go to state 92
    CLOSURE	shift, and go to state 156

    ClosureFunction	go to state 157



state 150

    Function  ->  FunctionName OB CB CompoundStmt Function .   (rule 28)

    $default	reduce using rule 28 (Function)



state 151

    CompoundStmt  ->  SO . Stmt SC   (rule 4)
    Function  ->  FunctionName OB FunctionParams CB SO . Stmt ClosureFunction Stmt SC Function   (rule 29)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    CLOSURE	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)
    MULRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 158
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 152

    Function  ->  FunctionName OB FunctionParams CB CompoundStmt . Function   (rule 31)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    $default	reduce using rule 32 (Function)

    FunctionName	go to state 75
    Function	go to state 159
    Type	go to state 28



state 153

    FunctionParams  ->  FunctionParams COMMA Type . Identifier   (rule 35)

    ID  	shift, and go to state 21

    Identifier	go to state 160



state 154

    SelectionStmt  ->  IF OB cond CB CompoundStmt ELSE . CompoundStmt   (rule 44)

    SO  	shift, and go to state 48

    CompoundStmt	go to state 161



state 155

    FunctionCall  ->  Identifier EQUAL Identifier OB VarList CB . SEMICOLON   (rule 39)

    SEMICOLON	shift, and go to state 162



state 156

    ClosureFunction  ->  CLOSURE . COLON FunctionName OB CB SO Stmt SC   (rule 33)
    ClosureFunction  ->  CLOSURE . COLON FunctionName OB FunctionParams CB SO Stmt SC   (rule 34)

    COLON	shift, and go to state 163



state 157

    Function  ->  FunctionName OB CB SO Stmt ClosureFunction . Stmt SC Function   (rule 30)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 164
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 158

    CompoundStmt  ->  SO Stmt . SC   (rule 4)
    Function  ->  FunctionName OB FunctionParams CB SO Stmt . ClosureFunction Stmt SC Function   (rule 29)

    SC  	shift, and go to state 92
    CLOSURE	shift, and go to state 156

    ClosureFunction	go to state 165



state 159

    Function  ->  FunctionName OB FunctionParams CB CompoundStmt Function .   (rule 31)

    $default	reduce using rule 31 (Function)



state 160

    FunctionParams  ->  FunctionParams COMMA Type Identifier .   (rule 35)

    $default	reduce using rule 35 (FunctionParams)



state 161

    SelectionStmt  ->  IF OB cond CB CompoundStmt ELSE CompoundStmt .   (rule 44)

    $default	reduce using rule 44 (SelectionStmt)



state 162

    FunctionCall  ->  Identifier EQUAL Identifier OB VarList CB SEMICOLON .   (rule 39)

    $default	reduce using rule 39 (FunctionCall)



state 163

    ClosureFunction  ->  CLOSURE COLON . FunctionName OB CB SO Stmt SC   (rule 33)
    ClosureFunction  ->  CLOSURE COLON . FunctionName OB FunctionParams CB SO Stmt SC   (rule 34)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    FunctionName	go to state 166
    Type	go to state 28



state 164

    Function  ->  FunctionName OB CB SO Stmt ClosureFunction Stmt . SC Function   (rule 30)

    SC  	shift, and go to state 167



state 165

    Function  ->  FunctionName OB FunctionParams CB SO Stmt ClosureFunction . Stmt SC Function   (rule 29)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 168
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 166

    ClosureFunction  ->  CLOSURE COLON FunctionName . OB CB SO Stmt SC   (rule 33)
    ClosureFunction  ->  CLOSURE COLON FunctionName . OB FunctionParams CB SO Stmt SC   (rule 34)

    OB  	shift, and go to state 169



state 167

    Function  ->  FunctionName OB CB SO Stmt ClosureFunction Stmt SC . Function   (rule 30)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    $default	reduce using rule 32 (Function)

    FunctionName	go to state 75
    Function	go to state 170
    Type	go to state 28



state 168

    Function  ->  FunctionName OB FunctionParams CB SO Stmt ClosureFunction Stmt . SC Function   (rule 29)

    SC  	shift, and go to state 171



state 169

    ClosureFunction  ->  CLOSURE COLON FunctionName OB . CB SO Stmt SC   (rule 33)
    ClosureFunction  ->  CLOSURE COLON FunctionName OB . FunctionParams CB SO Stmt SC   (rule 34)

    INT 	shift, and go to state 26
    CB  	shift, and go to state 172
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    FunctionParams	go to state 173
    Type	go to state 119



state 170

    Function  ->  FunctionName OB CB SO Stmt ClosureFunction Stmt SC Function .   (rule 30)

    $default	reduce using rule 30 (Function)



state 171

    Function  ->  FunctionName OB FunctionParams CB SO Stmt ClosureFunction Stmt SC . Function   (rule 29)

    INT 	shift, and go to state 26
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7

    $default	reduce using rule 32 (Function)

    FunctionName	go to state 75
    Function	go to state 174
    Type	go to state 28



state 172

    ClosureFunction  ->  CLOSURE COLON FunctionName OB CB . SO Stmt SC   (rule 33)

    SO  	shift, and go to state 175



state 173

    ClosureFunction  ->  CLOSURE COLON FunctionName OB FunctionParams . CB SO Stmt SC   (rule 34)
    FunctionParams  ->  FunctionParams . COMMA Type Identifier   (rule 35)

    CB  	shift, and go to state 176
    COMMA	shift, and go to state 139



state 174

    Function  ->  FunctionName OB FunctionParams CB SO Stmt ClosureFunction Stmt SC Function .   (rule 29)

    $default	reduce using rule 29 (Function)



state 175

    ClosureFunction  ->  CLOSURE COLON FunctionName OB CB SO . Stmt SC   (rule 33)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 177
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 176

    ClosureFunction  ->  CLOSURE COLON FunctionName OB FunctionParams CB . SO Stmt SC   (rule 34)

    SO  	shift, and go to state 178



state 177

    ClosureFunction  ->  CLOSURE COLON FunctionName OB CB SO Stmt . SC   (rule 33)

    SC  	shift, and go to state 179



state 178

    ClosureFunction  ->  CLOSURE COLON FunctionName OB FunctionParams CB SO . Stmt SC   (rule 34)

    error	shift, and go to state 59
    INT 	shift, and go to state 26
    OB  	shift, and go to state 40
    SO  	shift, and go to state 48
    IF  	shift, and go to state 60
    CONT	shift, and go to state 61
    BRK 	shift, and go to state 62
    RTRN	shift, and go to state 63
    VOID	shift, and go to state 6
    CHAR	shift, and go to state 7
    ID  	shift, and go to state 64
    NUM 	shift, and go to state 42

    SC  	reduce using rule 27 (Stmt)
    SUBRIGHT	reduce using rule 27 (Stmt)

    Identifier	go to state 65
    CompoundStmt	go to state 66
    Stmt	go to state 180
    Declaration	go to state 68
    FunctionCall	go to state 69
    AssignExpr	go to state 70
    SelectionStmt	go to state 71
    JumpStmt	go to state 72
    Extra	go to state 73
    Type	go to state 74
    E   	go to state 44
    T   	go to state 45
    F   	go to state 46



state 179

    ClosureFunction  ->  CLOSURE COLON FunctionName OB CB SO Stmt SC .   (rule 33)

    $default	reduce using rule 33 (ClosureFunction)



state 180

    ClosureFunction  ->  CLOSURE COLON FunctionName OB FunctionParams CB SO Stmt . SC   (rule 34)

    SC  	shift, and go to state 181



state 181

    ClosureFunction  ->  CLOSURE COLON FunctionName OB FunctionParams CB SO Stmt SC .   (rule 34)

    $default	reduce using rule 34 (ClosureFunction)



state 182

    $   	go to state 183



state 183

    $   	go to state 184



state 184

    $default	accept
